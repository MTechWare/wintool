/**
 * button-test-plugin - Plugin Script
 * Generated by WinTool Plugin CLI
 *
 * IMPORTANT: WinTool plugins work like tabs and must follow specific patterns:
 * 1. Use container.querySelector() instead of document.getElementById()
 * 2. Initialize immediately when script loads (not on DOMContentLoaded)
 * 3. Find your container using tabContainer or data-tab selector
 * 4. Call window.markTabAsReady(tabId) when initialization is complete
 */

console.log('=== button-test-plugin Plugin JavaScript loaded! ===');

// Find the container (similar to how other tabs do it)
let container = null;
if (typeof tabContainer !== 'undefined') {
    container = tabContainer;
    console.log('Using provided tabContainer');
}
if (!container) {
    container = document.querySelector('[data-tab="button-test-plugin"]');
    console.log('Found container via data-tab selector');
}

if (container) {
    console.log('Container found, initializing plugin');
    initializePlugin(container);
} else {
    console.error('No container found for button-test-plugin, cannot initialize.');
}

function initializePlugin(container) {
    console.log('Initializing button-test-plugin...');

    // IMPORTANT: Use container.querySelector() to find elements within your plugin
    // This ensures your plugin doesn't interfere with other tabs/plugins
    const actionBtn = container.querySelector('#action-btn');
    const sampleInput = container.querySelector('#sample-input');
    const resultArea = container.querySelector('#result-area');
    const resultContent = container.querySelector('#result-content');

    console.log('Elements found:', {
        actionBtn: !!actionBtn,
        sampleInput: !!sampleInput,
        resultArea: !!resultArea,
        resultContent: !!resultContent
    });

    // BUTTON HANDLING: Use addEventListener for button clicks
    // Alternative: You can also use onclick="functionName()" in HTML and make functions global with window.functionName
    if (actionBtn) {
        console.log('Adding click listener to action button');
        actionBtn.addEventListener('click', async function() {
            console.log('Button clicked!');
            const inputValue = sampleInput.value.trim();
            
            if (!inputValue) {
                showNotification('Please enter a value', 'warning');
                return;
            }
            
            try {
                actionBtn.disabled = true;
                actionBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                
                
                console.log('Processing input:', inputValue);
                // Frontend-only processing
                const result = processInput(inputValue);
                console.log('Processing result:', result);
                displayResult(result, container);
                
                
            } catch (error) {
                console.error('Action failed:', error);
                showNotification('Action failed: ' + error.message, 'error');
            } finally {
                actionBtn.disabled = false;
                actionBtn.innerHTML = '<i class="fas fa-play"></i> Execute Action';
            }
        });
    } else {
        console.error('Action button not found!');
    }

    // IMPORTANT: Signal that this tab is ready after initialization
    // This tells WinTool that your plugin has finished loading
    if (window.markTabAsReady && typeof tabId !== 'undefined') {
        console.log('Marking tab as ready:', tabId);
        window.markTabAsReady(tabId);
    } else {
        console.warn('window.markTabAsReady not available or tabId undefined');
    }
}


function processInput(input) {
    // Add your frontend processing logic here
    return {
        input: input,
        processed: input.toUpperCase(),
        timestamp: new Date().toISOString()
    };
}


// IMPORTANT: Always pass the container to functions that need to find elements
// This ensures proper scoping and prevents conflicts with other plugins
function displayResult(result, container) {
    const resultArea = container.querySelector('#result-area');
    const resultContent = container.querySelector('#result-content');
    
    if (resultContent) {
        resultContent.innerHTML = `
            <div class="result-item">
                <strong>Input:</strong> ${result.input || 'N/A'}
            </div>
            <div class="result-item">
                <strong>Result:</strong> ${result.processed || result.message || 'No result'}
            </div>
            <div class="result-item">
                <strong>Timestamp:</strong> ${result.timestamp || new Date().toISOString()}
            </div>
        `;
        
        resultArea.style.display = 'block';
    }
}

function showNotification(message, type = 'info') {
    if (window.wintoolAPI && window.wintoolAPI.notifications) {
        window.wintoolAPI.notifications.show(message, type);
    } else {
        console.log(`[${type.toUpperCase()}] ${message}`);
    }
}

// Plugin cleanup
window.addEventListener('beforeunload', function() {
    console.log('button-test-plugin plugin unloading');
});